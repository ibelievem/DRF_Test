1、列表生成式
	class Foo:
		pass
		
	class Bar:
		pass
		
	v=[item() for item in [Foo,Bar]]
	
2、面向对象
	--封装
		-对同一类方法封装到类中
		-将数据封装到对象中
			class File:
				def __init__(self,a1,a2):
					self.a1=a1
					self.xxx=a2
				def get:...
				def delete:...

			obj1=File(123,666)
			obj2=File(456,999)

3、FBV、CBV
	CBV:基于反射实现根据请求方式的不同，执行不同的方法
	原理：
		url-->view方法-->dispatch方法（反射（getattr方法）执行其他：GET/POST/DELETE/PUT）

4、csrf在django中是基于 中间件 实现的

5、django中间件最多有5个方法
	----process_request(self,request)	在请求传达到路由系统之前处理从服务器wsgi传来的请求。
	----process_view(self, request, callback, callback_args, callback_kwargs)	会在Django 调用视图之前被调用；
	----process_response(self,request,response)		处理本层或本层内层传递来的响应
	----process_exception(self, request, exception)		当一个视图抛出异常时，Django会调用process_exception()来处理。
	----process_render_template(self, request, response)	处理本层或本层内层传递来的响应

	
6、使用中间件做过什么？（中间件&装饰器）适用于所有请求批量做操作
	-- 基于角色的权限控制
	-- 用户认证
	-- 黑名单
	-- 日志记录
	-- session
	-- django的csrf的实现
	
		--不注释的情况：全站使用csrf认证
			放在process_view方法中，process_view方法检查视图是否被 @csrf_exempt 装饰，去请求体或者cookie中获取token
			from django.views.decorators.csrf import csrf_exempt
			@csrf_exempt装饰视图 可以解决csrf认证的问题
			
		--注释的情况：全站不使用csrf认证
			from django.views.decorators.csrf import csrf_protect
			@csrf_protect 该单独函数需要 csrf 的认证
		
		----在cbv（类视图）中使用装饰器的解决csrf认证的方法
			方式一：
				class StudentsView(View):
					@method_decorator(csrf_exempt)
					def dispatch(self, request, *args, **kwargs):
						return super(StudentsView,self).dispatch(request,*args,**kwargs)
					def get(self,request,*args,**kwargs):...
					def	post(self,request,*args,**kwargs):...
					def put(self,request,*args,**kwargs):...
					def delete(self,request,*args,**kwargs):...

			方式二：
				@method_decorator(csrf_exempt,name="dispatch")
				class StudentsView(View):
					def get(self,request,*args,**kwargs):...
					def	post(self,request,*args,**kwargs):...
					def put(self,request,*args,**kwargs):...
					def delete(self,request,*args,**kwargs):...
					
					
7、django请求的生命周期
	Django的请求生命周期是指：当用户在浏览器上输入url到用户看到网页的这个时间段内，Django后台所发生的事情。
	过程描述：
		第一步：浏览器发起请求
		第二步：WSGI创建socket服务端，接收请求（Httprequest）
		第三步：中间件处理请求
		第四步：url路由，根据当前请求的URL找到视图函数
		第五步：view视图，进行业务处理（ORM处理数据，从数据库取到数据返回给view视图；view视图将数据渲染到template模板；将数据返回）
		第六步：中间件处理响应
		第七步：WSGI返回响应（HttpResponse）
		第八步：浏览器渲染

					
--------------------------------------------------------------------------------------------

1、restful规范（建议），推荐使用CBV方式
		a.接口开发
			urlpatterns = [
				url(r'^get_order/',views.get_order),
				url(r'^add_order/',views.add_order),
				url(r'^del_order/',views.del_order),
				url(r'^update_order/',views.update_order),
				]
			
			def get_order(request):
				return HttpResponse('')
				
			def add_order(request):
				return HttpResponse('')

			def del_order(request):
				return HttpResponse('')

			def update_order(request):
				return HttpResponse('')
	
		b. restful规范（建议）
			1.根据method不同做不同的操作，实例：
				基于FBV:
					urlpatterns = [
						...
						url(r'^order/',views.order),
						]
					
					def order(request):
						if request.method=="GET":
							return HttpResponse("获取订单")
						elif request.method=="POST":
							return HttpResponse("创建订单")
						elif request.method=="PUT":
							return HttpResponse("更新订单")
						elif request.method=="DELETE":
							return HttpResponse("删除订单")
			
				基于CBV:
					urlpatterns = [
						...
						url(r'^order/',views.OrderView.as_view()),
						]
						
					class OrderView(View):
						def get(self,*args,**kwargs):
							return HttpResponse("获取订单")

						def post(self,*args,**kwargs):
							return HttpResponse("创建订单")

						def put(self,*args,**kwargs):
							return HttpResponse("更新订单")

						def delete(self,*args,**kwargs):
							return HttpResponse("删除订单")
			
			
		c. 谈谈自己对 restful api 规范的认识
			
			10个规则	

--------------------------------------------------------------------------------------------

2、django rest framework 框架	
	pip install djangorestframework
	
	★（1） 认证
		- 仅使用
			class MyAuthentication(object):
				def authenticate(self,request):
					token=request._request.GET.get("token")
					# 获取用户名和密码，去数据库校验
					if not token:
						raise exceptions.AuthenticationFailed("用户认证失败！")
					return ("alex",None)

				def authenticate_header(self,val):
					pass


			class DogView(APIView):
				# 局部认证
				authentication_classes = [MyAuthentication,]

				def get(self,request,*args,**kwargs):
					# 此时的request不再是原生的request，而是封装过后的request
					print(request)
					# 输出 alex
					print(request.user)  

					ret={
						"code":1000,
						"msg":"xxx",
					}
					return HttpResponse(json.dumps(ret),status=201)

				def post(self,*args,**kwargs):
					return HttpResponse("创建Dog")

				def put(self,*args,**kwargs):
					return HttpResponse("更新Dog")

				def delete(self,*args,**kwargs):
					return HttpResponse("删除Dog")
	
		- 源码流程：
			dispatch ...
	
		
		- 问题：有些API需要用户登录成功之后，才能访问；有些无需登录就能访问。
		
		- 基本使用
			解决：
				a. 创建两张表 （用户信息表和token表）
				b. 用户登录（返回token并保存到数据库中）
				
		- 认证流程原理（看源码注释）
		
		- 再看一遍源码
			1. 局部视图使用认证、全局使用认证
			2. 匿名时 request.user=None
		
		- 内置认证类
			1. 认证类，必须继承 from rest_framework.authentication import BaseAuthentication
			2. 其他认证类：BasicAuthentication
			
		- 梳理：
			1. 使用
				-- 创建类：继承BaseAuthentication，实现authenticate方法
				-- authenticate的返回值	
					- 无返回值，下一个认证来执行
					- 抛出异常，raise exceptions.AuthenticationFailed("用户认证失败")  # from rest_framework import exceptions
					- 有返回值，返回元组（元素1，元素2），元素1赋值给request.user; 元素2赋值给request.auth
				
				-- 局部使用认证
					在视图类中增加  authentication_classes = []
				
				-- 全局使用认证
					在 Settings.py文件中设置
					# 全局认证配置：做如下配置，所有的视图都需要认证
					REST_FRAMEWORK={
						# 全局使用的认证类，写的是路径
						"DEFAULT_AUTHENTICATION_CLASSES":["api.utils.auth.FirstAuthtication",
														  "api.utils.auth.Authtication",
														  ],
						# "UNAUTHENTICATED_USER":lambda :"匿名用户",
						"UNAUTHENTICATED_USER":None,    # 匿名  request.user=None
						"UNAUTHENTICATED_TOKEN":None,   # 匿名  request.auth=None
					}
			
			2. 源码流程
				- dispatch
					- 封装 request
						- 获取定义的认证类（全局/局部），通过列表生成式创建对象
					
					- 认证 initial
						- perform_authentication
							request.user(内部循环……)
							
	
	★（2） 权限 --用户类型不同，权限不同
			- 问题：不同的视图 用 不同的权限 可以访问
			
			- 基本使用
				class MyPermission(object):
					def has_permission(self,request,view):
						if request.user.user_type!=3:
							# 无权访问
							return False
						# 有权访问
						return True
				
				class OrderView(APIView):
					"""
					订单相关业务(只有 SVIP 用户有权限)
					"""
					# 局部认证
					# authentication_classes = [FirstAuthtication,Authtication]
					
					# 局部权限
					permission_classes = [MyPermission,]
					
					def get(self,request,*args,**kwargs):
						# request.user 为 token_obj.user
						# request.auth 为 token_obj
						ret={"code":1000,"msg":None}
						try:
							ret["data"]=ORDER_DICT
						except Exception as e:
							pass
						return JsonResponse(ret)
					
			
			- 源码流程：从 dispatch 开始看
			
			- 梳理：
				1. 使用
					- 类，必须继承 BasePermission，必须实现 has_permission方法
					
						from rest_framework.permissions import BasePermission
						class SVIPPermission(BasePermission):
							message="必须是 SVIP 才能访问"
							def has_permission(self,request,view):
								if request.user.user_type!=3:
									# 无权访问
									return False
								# 有权访问
								return True
					- 返回值：
						- True ，有权访问
						- False ，无权访问
					
					- 局部使用
						class UserInfoView(APIView):
							"""
							用户中心（普通用户、VIP）
							"""
							# 局部权限
							permission_classes = [MyPermission1,]

							def get(self,request,*args,**kwargs):
								print(request.user)
								print(request.auth)

								return HttpResponse("用户信息")
					
					- 全局使用
						REST_FRAMEWORK={
							# 全局使用权限，写的是路径
							"DEFAULT_PERMISSION_CLASSES":["api.utils.permission.SVIPPermission",
														  ],
						}
	
	
	★（3） 访问频率控制（节流）--匿名用户和登录用户的访问频率限制
			- 问题：控制访问频率
				VISIT_RECODE={}

				class VisitThrottle(object):
					"""10秒内只能访问3次"""

					def __init__(self):
						self.history=None

					def allow_request(self,request,view):

						# 1、获取用户的IP
						remote_addr=request.META.get("REMOTE_ADDR")
						# print(remote_addr)
						ctime=time.time()

						if remote_addr not in VISIT_RECODE:
							VISIT_RECODE[remote_addr]=[ctime,]
							return True
						# 使用get获取字典键对应的值时，不存在不会报错
						history=VISIT_RECODE.get(remote_addr)
						self.history=history

						while history and history[-1] < ctime - 10:
							# 删除此值
							history.pop()

						if len(history)<3:
							history.insert(0,ctime)
							return True

						# 表示没有被限制,可以继续访问
						# return True

						# 表示访问频率过高，被限制
						return False

					def wait(self):
						"""还需要等多少秒才可以访问"""
						ctime=time.time()
						return 10-(ctime-self.history[-1])		
								
				在视图中使用 ：（控制该视图的访问频率）
					# 局部访问频率限制
					throttle_classes = [VisitThrottle,]
					
			- 源码流程：看 dispatch
			
			- 内置控制频率类：
				from rest_framework.throttling import BaseThrottle,SimpleRateThrottle
				# 对于匿名用户实现访问控制频率
				class VisitThrottle(SimpleRateThrottle):
					# 当key使用
					scope = "Xws"

					def get_cache_key(self, request, view):
						return self.get_ident(request)

				# 对于登录用户实现访问控制频率
				class UserThrottle(SimpleRateThrottle):
					# 当key使用
					scope = "XwsUser"

					def get_cache_key(self, request, view):
						return request.user.username

	
				REST_FRAMEWORK={
					# 全局配置访问控制频率,写的是路径
					"DEFAULT_THROTTLE_CLASSES":["api.utils.throttle.UserThrottle",
												],
					"DEFAULT_THROTTLE_RATES":{
						"Xws":"3/m",        # 匿名用户的访问频率通过ip限制
						"XwsUser":"10/m",   # 登录用户的访问频率通过username限制
					}
				}
	
			- 梳理：
				a. 基本使用
					- 自定义类，继承BaseThrottle，必须实现 allow_request、wait 方法
					- 使用内置类，继承SimpleRateThrottle，必须实现get_cache_key方法，且必须写scope的值（配置文件中某个字典的key）
				
				
				b. 局部使用
					class AuthView(APIView):
						'''
						用于用户登录认证
						'''

						# 在settings中配置全部视图都需认证，但是当authentication_classes = []时，可免除认证，即使用匿名用户
						# 此时 requset.user=None , requset.auth=None
						# 局部认证，匿名用户
						authentication_classes = []

						# 局部权限，匿名用户
						permission_classes = []

						# 局部访问频率限制,匿名用户使用ip限制**************此处加入即可
						throttle_classes = [VisitThrottle,]

						def post(self,requset,*args,**kwargs):

							ret={"code":1000,"msg":None}
							try:
								user=requset._request.POST.get("username")
								pwd=requset._request.POST.get("password")
								obj=models.UserInfo.objects.filter(username=user,password=pwd).first()
								# print(obj,type(obj))
								# print(user,pwd)

								if not obj:
									ret["code"]=1001
									ret["msg"]="用户名或密码错误"

								# 登录用户创建 token
								token=md5(user)

								# 数据库中的token表中存在就更新，不存在就创建
								models.UserToken.objects.update_or_create(user=obj,defaults={"token":token})

								ret["token"]=token

							except Exception as e:
								ret["code"]=1002
								ret["msg"]="请求异常"

							return JsonResponse(ret)
				
				c. 全局使用
					REST_FRAMEWORK={
						# 全局使用的认证类,写的是路径
						"DEFAULT_AUTHENTICATION_CLASSES":["api.utils.auth.FirstAuthtication",
														  "api.utils.auth.Authtication",
														  ],
						# "UNAUTHENTICATED_USER":lambda :"匿名用户",
						"UNAUTHENTICATED_USER":None,    # 匿名  request.user=None
						"UNAUTHENTICATED_TOKEN":None,   # 匿名  request.auth=None

						# 全局使用权限，写的是路径
						"DEFAULT_PERMISSION_CLASSES":["api.utils.permission.SVIPPermission",
													  ],

						# 全局配置访问控制频率,写的是路径
						"DEFAULT_THROTTLE_CLASSES":["api.utils.throttle.UserThrottle",
													],
						"DEFAULT_THROTTLE_RATES":{
							"Xws":"3/m",        # 匿名用户的访问频率通过ip限制
							"XwsUser":"10/m",   # 登录用户的访问频率通过username限制
						}
					}
	
	
	★（4） 版本 *
			a. URL中通过GET传参
				- 自定义设置类
					class ParamVersion(object):
						def determine_version(self, request, *args, **kwargs):
							version = request.query_params.get("version")
							return version
							
					class UsersView(APIView):
						versioning_class = ParamVersion
						def get(self,request,*args,**kwargs):
							# version=request._request.GET.get("version")
							# print(version)
							# version1=request.query_params.get("version")
							# print(version1)
							print(request.version)
							return HttpResponse("用户列表")	
				
				
				- 使用内置类
					from rest_framework.versioning import QueryParameterVersioning
					class UsersView(APIView):
						versioning_class = QueryParameterVersioning
						def get(self,request,*args,**kwargs):
							print(request.version)
							return HttpResponse("用户列表")
							
							
					# 版本配置
					REST_FRAMEWORK={
						"DEFAULT_VERSION":"v1",
						"ALLOWED_VERSIONS":["v1","v2"],
					}
								
			b. 在URL路径中传参（推荐使用）
			
				urlpatterns = [
					url(r'^(?P<version>[v1|v2]+)/users/$',views.UsersView.as_view()),
				]
				
				# 版本配置
				REST_FRAMEWORK={
					"DEFAULT_VERSIONING_CLASS":"rest_framework.versioning.URLPathVersioning",
					"DEFAULT_VERSION":"v1",
					"ALLOWED_VERSIONS":["v1","v2"],
				}
				
				class UsersView(APIView):
					def get(self,request,*args,**kwargs):
						print(request.version)
						return HttpResponse("用户列表")
			
			
			c. 总结：
				使用：
					-- 配置文件：
						# 版本配置
						REST_FRAMEWORK={
							"DEFAULT_VERSIONING_CLASS":"rest_framework.versioning.URLPathVersioning",
							"DEFAULT_VERSION":"v1",
							"ALLOWED_VERSIONS":["v1","v2"],
							'VERSION_PARAM': 'version',
						}
						
					-- 路由系统：
						- 项目路由 分发
						urlpatterns = [
							# url(r'^admin/', admin.site.urls),
							url(r'^api/', include("api.urls")),
						]
						
						- 应用路由：
							urlpatterns = [
								url(r'^(?P<version>[v1|v2]+)/users/$',views.UsersView.as_view(),name="users"),
							]
							
					-- 视图：
						class UsersView(APIView):
							def get(self,request,*args,**kwargs):

								# 1、获取版本
								print(request.version)

								# 2、获取处理版本类的对象
								print(request.versioning_scheme)

								# 3、反向生成URL
								url=request.versioning_scheme.reverse(viewname="users",request=request)
								print(url)

								return HttpResponse("用户列表")

						
	★（5） 解析器 *
			- 前戏： django: request.POST / request.body 
				1. 请求头要求：
				如果请求头中 Content_Type == 'application/x-www-form-urlencoded' , request.POST中才有值（去request.body中解析数据）
				2. 数据格式要求：
					name=alex&age=29&gender=男
					
				如：
					a. form表单提交
						<form method...>
							input ...
						</form>
					
					b. ajax提交
						$.ajax({
							url:...
							type:POST,
							data:{name:alex,age:18} # 内部转化为 name=alex&age=18&gender=男
						})
						
						
						情况一：
							# body有值，post无
							$.ajax({
								url:...
								type:POST,
								headers:{'Content_Type':'application/json'}
								data:{name:alex,age:18} # 内部转化为 name=alex&age=18&gender=男
							})
						
						情况二：
							# body有值，post无
							$.ajax({
								url:...
								type:POST,
								headers:{'Content_Type':'application/json'}
								data:JSON.stringfy({name:alex,age:18}) # {name:alex,age:18,gender:男}
							})
							
			
			- rest_framework 解析器，对请求体的数据进行解析
			
			- 总结：
				使用：
					全局配置：
						# 版本配置
						REST_FRAMEWORK={
							# 全局配置解析器
							"DEFAULT_PARSER_CLASSES":[
								"rest_framework.parsers.JSONParser",
								"rest_framework.parsers.FormParser",
							],
						}
					
					使用：
						class ParserView(APIView):
							# 局部配置解析器
							# parser_classes = [JSONParser,FormParser]
							"""
							JSONParser：表示只能解析 content-type:application/json 头
							FormParser：表示只能解析 content-type:application/x-www-form-urlencode 头
							"""
							def post(self,request,*args,**kwargs):
								"""
								允许用户发送json格式数据
									a. content-type:application/json
									b. {"name"："alex","age":18}
								"""
								# 获取解析后的结果,用的时候才去解析
								"""
								1、获取用户的请求头
								2、获取用户的请求体
								3、根据用户的请求头和 parser_classes=[JSONParser,FormParser]中支持的请求头进行比较
								4、JSONParser对象去处理请求体
								5、request.data
								"""
								print(request.data)

								# 字典类型
								print(type(request.data))

								return HttpResponse("ParserView")
			
			
			- 源码流程 & 本质：
				a. 本质：
					请求头
					状态码
					请求方法
					
				b. 源码流程
					- dispatch:request封装
					- request.data
	
	
	★（6） 序列化 ****
			-- QuerySet进行序列化：
				- 部分总结：
					1. 写类
						# 方式一：继承serializers.Serializer，需要手动写显示的字段
						class RolesSerializer(serializers.Serializer):
							id=serializers.IntegerField()
							title=serializers.CharField()
						
						# 方式二：继承serializers.ModelSerializer，自动生成
						class UserinfoSerializer(serializers.ModelSerializer):
							class Meta:
								model=models.UserInfo
								# fields="__all__"
								fields=["id","username","password","ooo","rls","group"]
					
					2. 字段
						a. 一对一、多对一查询时：
							ooo = serializers.CharField(source="get_user_type_display")
							group=serializers.CharField(source="group.title")
						
						b. 多对多查询时：
							rls = serializers.SerializerMethodField() # 自定义显示
							
							# 自定义方法
							# row 当前行的对象
							def get_rls(self,row):
								role_obj_list=row.roles.all()
								ret=[]
								for item in role_obj_list:
									ret.append({"id":item.id,"title":item.title})
								return ret
						
					3. 自动序列化连表
						class UserinfoSerializer(serializers.ModelSerializer):
							class Meta:
								model=models.UserInfo
								# fields="__all__"
								fields=["id","username","password","group","roles"]
								# 深度 最好 0~4 之间
								depth=1
					
					4. 生成链接
						class UserinfoSerializer(serializers.ModelSerializer):
							# 反向生成某字段的url
							group = serializers.HyperlinkedIdentityField(view_name='gp',lookup_field="group_id",lookup_url_kwarg="pk")

							class Meta:
								model=models.UserInfo
								# fields="__all__"
								fields=["id","username","password","group","roles"]

								# 深度 最好 0~4 之间
								depth=0

						class UserinfoView(APIView):
							def get(self,request,*args,**kwargs):
								users = models.UserInfo.objects.all()
								ser=UserinfoSerializer(instance=users,many=True,context={"request":request})
								print(ser.data)
								ret = json.dumps(ser.data, ensure_ascii=False)
								print(ret,type(ret))

								return HttpResponse(ret)
									
				- 源码	
					对象，Serializer类处理
					QuerySet，ListSerializer类处理
					从ser.data开始看
			
			-- 请求数据校验
				class PasswordValidator(object):
					def __init__(self, base):
						self.base = str(base)

					def __call__(self, value):
						if value != self.base:
							message = '标题必须以 %s 为开头。' % self.base
							raise serializers.ValidationError(message)

					def set_context(self, serializer_field):
						"""
						This hook is called by the serializer instance,
						prior to the validation call being made.
						"""
						# 执行验证之前调用,serializer_fields是当前字段对象
						pass


				class UsergroupSerializer(serializers.Serializer):
					title = serializers.CharField(error_messages={"required":"标题不能为空"},validators=[PasswordValidator("老男人")])


				class UsergroupView(APIView):

					def post(self, request, *args, **kwargs):
						# print(request.data)
						ser=UsergroupSerializer(data=request.data)
						if ser.is_valid():
							print(ser.validated_data["title"])
						else:
							print(ser.errors)

						return HttpResponse("提交数据")
										

	★（7） 分页 ***
			a. 分页，看第几页，每页显示n条数据
				from api.utils.serializers.pager import PagerSerializer
				from rest_framework.response import Response
				from rest_framework.pagination import PageNumberPagination

				# 方式一、分页，看第几页，每页显示n条数据
				# 根据自己写的类可以定制通过参数修改每页的数据量
				class MyPageNumberPagination(PageNumberPagination):
					# 每页的显示个数
					page_size = 2
					# 通过参数 size 修改每页显示的个数
					page_size_query_param = "size"
					# 每页最多显示 5 个
					max_page_size = 5

					# 通过参数 page 设置页码
					page_query_param = 'page'
					
					
				class Pager1View(APIView):

					def get(self, request, *args, **kwargs):
						# 获取所有数据
						roles=models.Role.objects.all()

						# 创建分页对象，根据自己写的类可以定制通过参数修改每页的数据量
						# pg=MyPageNumberPagination()
						# 创建分页对象，按部就班的显示每页的数据量
						pg=PageNumberPagination()

						# 在数据库中获取分页的数据
						pager_roles=pg.paginate_queryset(queryset=roles,request=request,view=self)
						print(pager_roles)

						# 对数据进行序列化
						ser=PagerSerializer(instance=pager_roles,many=True)

						# 返回的不仅有数据，还有上下页的 url
						# return pg.get_paginated_response(ser.data)
						
						return Response(ser.data)

			
			b. 分页，在某个位置，向后查看n条数据
				from api.utils.serializers.pager import PagerSerializer
				from rest_framework.response import Response
				from rest_framework.pagination import LimitOffsetPagination

				# # 根据自己写的类可以定制通过参数修改每页的数据量
				# # 方式二、分页，在某个位置，向后查看n条数据
				class MyPageNumberPagination(LimitOffsetPagination):

					# 每页默认从索引向后取 2 条数据
					default_limit = 2
					# 通过参数 size 修改从索引向后取数据的个数
					limit_query_param = 'limit'
					# 从索引向后取数据的个数最多5条
					max_limit = 5

					# 索引位置
					offset_query_param = 'offset'


				class Pager1View(APIView):

					def get(self, request, *args, **kwargs):
						# 获取所有数据
						roles=models.Role.objects.all()

						# 创建分页对象，根据自己写的类可以定制通过参数修改每页的数据量
						# pg=MyPageNumberPagination()
						# 创建分页对象，按部就班的显示每页的数据量
						pg=LimitOffsetPagination()

						# 在数据库中获取分页的数据
						pager_roles=pg.paginate_queryset(queryset=roles,request=request,view=self)
						print(pager_roles)

						# 对数据进行序列化
						ser=PagerSerializer(instance=pager_roles,many=True)

						# 返回的不仅有数据，还有上下页的 url
						# return pg.get_paginated_response(ser.data)
						
						return Response(ser.data)

				
			c. 加密分页，上一页和下一页（推荐使用此方式，性能提升）
				from api.utils.serializers.pager import PagerSerializer
				from rest_framework.pagination import CursorPagination

				# 根据自己写的类可以定制通过参数修改每页的数据量
				# 方式三、分页，在某个位置，向后查看n条数据
				class MyPageNumberPagination(CursorPagination):

					# 页码参数，加密过后的页码
					cursor_query_param = 'cursor'
					# 每页显示的数据量
					page_size = 2
					# 按照 id 正序排列每页的数据
					ordering = '-id'
					# 修改每页显示的数据量
					page_size_query_param = None

					# 修改每页显示的最大数据量
					max_page_size = None

					
				class Pager1View(APIView):

					def get(self, request, *args, **kwargs):
						# 获取所有数据
						roles=models.Role.objects.all()

						# 创建分页对象，根据自己写的类可以定制通过参数修改每页的数据量
						pg=MyPageNumberPagination()
						# 创建分页对象，按部就班的显示每页的数据量
						# pg=CursorPagination()

						# 在数据库中获取分页的数据
						pager_roles=pg.paginate_queryset(queryset=roles,request=request,view=self)
						print(pager_roles)

						# 对数据进行序列化
						ser=PagerSerializer(instance=pager_roles,many=True)

						# 返回的不仅有数据，还有上下页的 url
						# 因为页码加密，因此必须用此方式返回数据
						return pg.get_paginated_response(ser.data)
									
			
			总结：
				1、如果数据量大的话，如何做分页？
					- 数据库性能相关

	
	★（8） 视图 ***
		a. 过去，继承 View
			class Pager1View(View):
				pass
		
		b. 现在，继承 APIView
			class Pager1View(APIView):  # APIView 继承 View
				pass
		
		c. 继承 GenericAPIView ，无意义
			from rest_framework.response import Response
			from rest_framework.generics import GenericAPIView

			class View1View(GenericAPIView):
				queryset = models.Role.objects.all()
				serializer_class = PagerSerializer
				pagination_class = MyPageNumberPagination

				def get(self,request,*args,**kwargs):

					# 获取数据
					roles=self.get_queryset()  # models.Role.objects.all()

					# 从[1,1000]中取 [1,10]
					pager_roles=self.paginate_queryset(roles)

					# 序列化数据
					ser=self.get_serializer(instance=pager_roles,many=True)

					return Response(ser.data)
				
		d. 继承 GenericViewSet ，稍微有意义，视图的不同引发路由的改变 
			GenericViewSet(ViewSetMixin, generics.GenericAPIView):
		
			路由：
				url(r'^(?P<version>[v1|v2]+)/view1/$',views.View1View.as_view({"get":"list"})),
			
			视图：
				from rest_framework.viewsets import GenericViewSet
				from rest_framework.response import Response

				class View1View(GenericViewSet):
					queryset = models.Role.objects.all()
					serializer_class = PagerSerializer
					pagination_class = MyPageNumberPagination

					def list(self,request,*args,**kwargs):

						# 获取数据
						roles=self.get_queryset()  # models.Role.objects.all()

						# 从[1,1000]中取 [1,10]
						pager_roles=self.paginate_queryset(roles)

						# 序列化数据
						ser=self.get_serializer(instance=pager_roles,many=True)

						return Response(ser.data)
		
		e. 继承 ModelViewSet ，推荐使用
				ModelViewSet(mixins.CreateModelMixin,
					   mixins.RetrieveModelMixin,
					   mixins.UpdateModelMixin,
					   mixins.DestroyModelMixin,
					   mixins.ListModelMixin,
					   GenericViewSet)
				# mixins.CreateModelMixin,  增加数据，
				# mixins.RetrieveModelMixin,查询单条数据，需要传 id
				# mixins.UpdateModelMixin,  更新数据，需要传 id
				# mixins.DestroyModelMixin, 删除数据，需要传 id
				# mixins.ListModelMixin,    查询所有数据
				# GenericViewSet,  实现方法的映射
				
			路由：	
				# 查询所有、增加
				url(r'^(?P<version>[v1|v2]+)/view1/$',views.View1View.as_view({"get":"list","post":"create"})),
				# 查询单个、更新所有、删除、更新单个
				url(r'^(?P<version>[v1|v2]+)/view1/(?P<pk>\d+)$',views.View1View.as_view({"get":"retrieve",
                                                                              "delete":"destroy",
                                                                              "put":"update",
                                                                              "patch":"partial_update"
                                                                              })),
		
			视图：
				from rest_framework.viewsets import ModelViewSet
				class View1View(ModelViewSet):
					queryset = models.Role.objects.all()
					serializer_class = PagerSerializer
					pagination_class = MyPageNumberPagination
	
	
		总结：
			使用：
				1. 例如：只有增加功能 View1View(mixins.CreateModelMixin,GenericViewSet)，自己选择
				2. 若只有基本的增删改查基本操作，推荐使用 ModelViewSet ，简单直接，默认写好的
				3. 若有复杂逻辑的情况下：GenericViewSet或者APIView都可以
					GenericViewSet：推荐使用，
					例如使用 APIView 遇到的麻烦：
						在 get 请求中，查询单个数据和查询所有数据需要两条路由，且都定位到同一视图中，
						并且需要在同一视图中根据路由中的参数判断是否有id去选择对应的get查询方式。				
	
	
	★（9） 路由 ***
	
		a. 
			url(r'^(?P<version>[v1|v2]+)/pager1/$',views.Pager1View.as_view()),
		
		b.
			url(r'^(?P<version>[v1|v2]+)/view1/$',views.View1View.as_view({"get":"list","post":"create"})),
	
		c. 自动生成路由
			from django.conf.urls import url, include
			from api import views
			from rest_framework import routers
			router = routers.DefaultRouter()
			router.register(r'xws', views.View1View)

			urlpatterns = [
				url(r'^', include(router.urls)),
			]


	★（10）渲染器 *
		- 视图：
			from rest_framework.response import Response
			from rest_framework.renderers import JSONRenderer
			from rest_framework.renderers import BrowsableAPIRenderer

			class TestView(APIView):

				# 渲染器局部配置
				# renderer_classes = [JSONRenderer,BrowsableAPIRenderer]

				def get(self,request,*args,**kwargs):

				# 获取所有数据
				roles = models.Role.objects.all()

				# 创建分页对象，根据自己写的类可以定制通过参数修改每页的数据量
				pg = MyPageNumberPagination()
				# 创建分页对象，按部就班的显示每页的数据量
				# pg=CursorPagination()

				# 在数据库中获取分页的数据
				pager_roles = pg.paginate_queryset(queryset=roles, request=request, view=self)

				ser = PagerSerializer(instance=pager_roles, many=True)

				return Response(ser.data)
		
		- 全局配置：（主要添加自定义的类，用于显示自己定制的功能）
			REST_FRAMEWORK={

				# 渲染器配置
				"DEFAULT_RENDERER_CLASSES":[
					"rest_framework.renderers.JSONRenderer",
					"rest_framework.renderers.BrowsableAPIRenderer",
				],

			}
	
	
